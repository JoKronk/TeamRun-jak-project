    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    (defun update-state ()
      (if (and (= *cheat-mode* #f) (= *debug-segment* #f))
        (set! (-> *teamrun-info* debug_mode_active?) 0)
        (set! (-> *teamrun-info* debug_mode_active?) 1)
        )

      (set! (-> *teamrun-info* cell_count) (the int32 (-> *game-info* fuel)))
      (set! (-> *teamrun-info* death_count) (the int32 (-> *game-info* total-deaths)))

      (set! (-> *teamrun-info* jungle_lurkerm) (enum->string task-status (get-task-status (game-task jungle-lurkerm))))
      (set! (-> *teamrun-info* village1_yakow) (enum->string task-status (get-task-status (game-task village1-yakow))))
      (set! (-> *teamrun-info* misty_muse) (enum->string task-status (get-task-status (game-task misty-muse))))
      (set! (-> *teamrun-info* rolling_race) (enum->string task-status (get-task-status (game-task rolling-race))))
      (set! (-> *teamrun-info* rolling_moles) (enum->string task-status (get-task-status (game-task rolling-moles))))
      (set! (-> *teamrun-info* village2_levitator) (enum->string task-status (get-task-status (game-task village2-levitator))))
      (set! (-> *teamrun-info* village3_button) (enum->string task-status (get-task-status (game-task village3-button))))
      (set! (-> *teamrun-info* lavatube_balls) (enum->string task-status (get-task-status (game-task lavatube-balls))))
      (set! (-> *teamrun-info* village4_button) (enum->string task-status (get-task-status (game-task village4-button))))
      (set! (-> *teamrun-info* plunger_lurker_hit) (enum->string task-status (get-task-status (game-task plunger-lurker-hit))))

      (set! *state-update?* #t)
    (none)
    )

    (defun check-allow-cell-pickup? ()
      *allow-cell-pickup?*
    )

    (defun check-allow-final-boss? ()
      *allow-final-boss?*
    )

    (defun runs-on-level-enter ()
      (when (and (!= *target* #f) (!= (-> (level-get-target-inside *level*) name) 'title))
        (set! (-> *teamrun-info* current_level) (symbol->string (-> (level-get-target-inside *level*) name)))
        (if (!= (-> *game-info* current-continue level) (-> *teamrun-info* current_level))
          (update-state)
          )
        )
    (none)
    )

    (defun runs-after-save-load ()
        (update-state)
    )


    (defun set-zoomer-wait-mode ()
      (set! (-> *racer-mods* target-speed) 33840.0)
      (set! (-> *racer-air-mods* target-speed) 33840.0)
    )
    (defun set-zoomer-full-mode ()
      (set! (-> *racer-mods* target-speed) 163840.0)
      (set! (-> *racer-air-mods* target-speed) 163840.0)
    )

    (defun runs-on-zoomer-entry ()
      (set! (-> *teamrun-info* on_zoomer?) 1)
        (update-state)
    (none)
    )

    (defun runs-on-zoomer-exit ()
      (set! (-> *teamrun-info* on_zoomer?) 0)
        (update-state)
    )

    (defun runs-on-shared-task-update ((task game-task))
        (update-state)
      (none)
    )

    (defun runs-on-task-complete ((task game-task))
        (update-state)
      (none)
    )

    (defun runs-on-debug-toggle ()
      (update-state)
    )

    (defun runs-on-warp-gate-open ((task game-task))
      (if (or (= (get-task-status task) (task-status invalid)) (= (get-task-status task) (task-status need-reminder-a)))
        (update-state)
      )
      (none)
    )

    (defun runs-on-new-checkpoint ()
      (when (and (!= *target* #f) (!= (-> (level-get-target-inside *level*) name) 'title))
        (set! (-> *teamrun-info* current_checkpoint) (-> *game-info* current-continue name))
        (update-state)
      )
      (none)
    ) 


    (defun manual-position-update ((num int) (transX float) (transY float) (transZ float) (quatY float) (quatZ float) (quatW float) (state string))
      (set! (-> *multiplayer-info* players num trans_x)    transX)
      (set! (-> *multiplayer-info* players num trans_y)    transY)
      (set! (-> *multiplayer-info* players num trans_z)    transZ)
      (set! (-> *multiplayer-info* players num quat_y)     quatY)
      (set! (-> *multiplayer-info* players num quat_z)     quatZ)
      (set! (-> *multiplayer-info* players num quat_w)     quatW)
      (set! (-> *multiplayer-info* players num tgt_state)  (string->symbol state))
      (none)
      )


    (defun runs-every-frame ()
      (when (and (!= *target* #f) (!= (-> (level-get-target-inside *level*) name) 'title))
      
      ;; setup our own remote-player-info if we haven't yet
      (set-up-self-remote-if-null)

      (when (and *target* (>= (-> *multiplayer-info* player_num) 0) (!= (-> *self-player-info* mp_state) (mp-tgt-state mp-tgt-disconnected)))

        ;; on player movement
        (when (or (!= (-> *self-player-info* trans_x) (-> *target* root trans x))
        (!= (-> *self-player-info* trans_y) (-> *target* root trans y))
        (!= (-> *self-player-info* trans_z) (-> *target* root trans z))
        (= *state-update?* #t))

            ;; update this player's position
            (update-self-multiplayer-info)
            ;; (update-debug-self-multiplayer-info)
            
            ;; send updated player info to client
            (if (= *state-update?* #t)
            (pc-update-position 1)
            (pc-update-position 0)
            )

            (if (= *state-update?* #t)
              (set! *state-update?* #f)
            )

            (if (= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) mp_state) (mp-tgt-state mp-tgt-disconnected))
              (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) mp_state) (mp-tgt-state mp-tgt-connected))
              )
          )

        (render-targets)

        )
      )
      (none)
      )

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup


        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ()
      ;; Code here runs on any scout fly pickup

      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell

          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)   
      (set! (-> *teamrun-info* on_zoomer?) 0)
      (update-state)

      (when (and (string= (-> *game-info* current-continue name) "finalboss-fight") (= *allow-final-boss?* #f))
        (set-continue! *game-info* "finalboss-start")
        (+! (-> *target* root trans x) (meters -161.0))
        (+! (-> *target* root trans z) (meters 120.0))
        (+! (-> *target* root trans y) (meters 90.0))
        (send-event *camera* 'change-state cam-string 0)
      )
      
      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;; Custom checkpoint storage
    (define *tmp-continue-point* (new 'static 'continue-point
      :name "tmp"
      :level #f
      :trans (new 'static 'vector :w 1.0)
      :quat (new 'static 'quaternion :w 1.0)
      :camera-trans (new 'static 'vector :w 1.0)
      :camera-rot (new 'static 'array float 9)
      :load-commands '()
      :vis-nick #f
      :lev0 #f
      :disp0 #f
      :lev1 #f
      :disp1 #f
      )
      )
      
    (define *tmp-flut?* #f)
    (define *tmp-zoomer?* #f)
    (define *full-hp?* #f)
    (define *last-real-continue-point* (the-as continue-point #f))
    
    (defun continue-point-copy! ((dst continue-point) (src continue-point))
      (set! (-> dst level) (-> src level))
      (set! (-> dst quat y) 0.0)
      (set! (-> dst quat w) 1.0)
      (set! (-> dst load-commands) (-> src load-commands))
      (set! (-> dst vis-nick) (-> src vis-nick))
      (when (-> *level* level0)
        (set! (-> dst lev0) (-> *level* level0 name))
        (set! (-> dst lev0) (-> *level* level0 name))
        (set! (-> dst disp0) (-> *level* level0 display?))
        )
      (when (-> *level* level1)
        (set! (-> dst lev1) (-> *level* level1 name))
        (set! (-> dst disp1) (-> *level* level1 display?))
        )
      (none)
      )

    
    (defun camera-rot-copy! ((dst continue-point) (src matrix))
      (set! (-> dst camera-rot 0) (-> src vector 0 x))
      (set! (-> dst camera-rot 1) (-> src vector 0 y))
      (set! (-> dst camera-rot 2) (-> src vector 0 z))
      (set! (-> dst camera-rot 3) (-> src vector 1 x))
      (set! (-> dst camera-rot 4) (-> src vector 1 y))
      (set! (-> dst camera-rot 5) (-> src vector 1 z))
      (set! (-> dst camera-rot 6) (-> src vector 2 x))
      (set! (-> dst camera-rot 7) (-> src vector 2 y))
      (set! (-> dst camera-rot 8) (-> src vector 2 z))
      (none)
      )


    (defun speedrun-reset-common-settings ()
      ;; disable hints (this seems to be overriden by your slot 1 save though)
      (set! (-> *setting-control* default play-hints) #f)
      ;; ensure `force actors` is not enabled
      ;; (set! (-> *pc-settings* ps2-actor-vis?) #t)
      ;; force FPS to `60`
      ;; (set-frame-rate! *pc-settings* 60 #t)
      ;; skip intro cutscene
      (close-specific-task! (game-task intro) (task-status need-resolution))
      (none)
      )

    
    (defun spawn-temp-checkpoint ()
      (when (-> *tmp-continue-point* level)
        ;; store last real checkpoint to restore later
        (when (not (string= (-> *game-info* current-continue name) "tmp"))
          (set! *last-real-continue-point* (-> *game-info* current-continue))
          )
        (set! (-> *game-info* current-continue) *tmp-continue-point*)
        (initialize! *game-info* 'dead (the-as game-save #f) (the-as string #f))
        (speedrun-reset-common-settings)
        )
      (none)
      )

    (defun store-temp-checkpoint ()
      ;; outside of bsp breaks shit
      (when (or (-> *level* level0 inside-boxes?) (-> *level* level1 inside-boxes?))
        (case (-> *target* state)
          ;; only store temp checkpoint if in one of these states
          ((target-stance target-wade-stance target-swim-stance target-flut-stance target-racing)
            
            ;; assume current continue is good enough for the current location
            (continue-point-copy! *tmp-continue-point* (-> *game-info* current-continue))
            (vector-copy! (-> *tmp-continue-point* trans) (-> *target* root trans))
            (quaternion-copy! (-> *tmp-continue-point* quat) (-> *target* control unknown-quaternion00))
            (vector-copy! (-> *tmp-continue-point* camera-trans) (-> *camera-combiner* trans))
            (camera-rot-copy! *tmp-continue-point* (-> *camera-combiner* inv-camera-rot))

            (set! *full-hp?* (and (!= *target* #f)
                          (= (-> *target* fact-info-target health) 3.0)
                          (= (-> *target* fact-info-target eco-pill) 50.0)
                          ))
            (set! *tmp-flut?* #f)
            (set! *tmp-zoomer?* #f)
            (case (-> *target* state)
              ((target-flut-stance)
                (set! *tmp-flut?* #t)
                )
              ((target-racing)
                (set! *tmp-zoomer?* #t)
                )
              )
            )
          )
        )
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
