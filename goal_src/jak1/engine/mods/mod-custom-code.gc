    ;;-*-Lisp-*-
    (in-package goal)

    ;; name: mod-custom-code.gc
    ;; name in dgo: mod-custom-code
    ;; dgos: TODO


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; What is this file for.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| This file contains function defenitions that are pre placed in the mod base,
    so if you place custom code inside of these functions, it will exectue based on
    the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
    to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
    an orb |#


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; Begin function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    (defun update-state ()
      (if (and (= *cheat-mode* #f) (= *debug-segment* #f))
        (set! (-> *teamrun-info* debug_mode_active?) 0)
        (set! (-> *teamrun-info* debug_mode_active?) 1)
        )

      (set! (-> *teamrun-info* cell_count) (the int32 (-> *game-info* fuel)))
      (set! (-> *teamrun-info* buzzer_count) (the int32 (-> *game-info* buzzer-total)))
      (set! (-> *teamrun-info* money_count) (the int32 (-> *game-info* money)))
      (set! (-> *teamrun-info* death_count) (the int32 (-> *game-info* total-deaths)))

      (set! (-> *teamrun-info* has_state_update?) 1)
      (set! *has-none-position-update?* #t)
    (none)
    )

    (defun check-allow-final-boss? ()
      *allow-final-boss?*
    )

    (defun runs-on-level-enter ()
      (when (and *target* (!= (-> (level-get-target-inside *level*) name) 'title))
        (when (!= (-> *self-player-info* current_level) (symbol->string (-> (level-get-target-inside *level*) name)))
          (set! (-> *self-player-info* current_level) (symbol->string (-> (level-get-target-inside *level*) name)))
          (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) current_level) (-> *self-player-info* current_level))
          (set! *current-boss-phase* -1)
          )
        (set! *allow-cell-pickup?* (or (= (-> *multiplayer-info* game require_same_level) 0) (all-teammates-in-same-level?)))
        )
      (none)
      )

    (defun runs-after-save ()
      (set! *player-can-load* #t)
      (set! (-> *teamrun-info* just_saved?) 1)
      (update-state)
      (none)
    )

    (defun runs-after-load ()
      (set! (-> *teamrun-info* just_loaded?) 1)
      (update-state)
      (none)
    )

    (defun runs-on-debug-toggle ()
      (update-state)
      (none)
      )

    (defun runs-on-warp-gate-open ((task game-task))
      (none)
      )

    (defun runs-on-new-checkpoint ()
      (when (and *target* (!= (-> (level-get-target-inside *level*) name) 'title))
        (set! (-> *teamrun-info* current_continue) (-> *game-info* current-continue name))
        (update-state)
        (set! *player-can-load* #f)

        (if (and (= (-> *multiplayer-info* game no_lts) 1) (name= (-> *game-info* current-continue name) "lavatube-after-ribbon") (< (get-team-cell-count) 72))
          (start 'play (get-continue-by-name *game-info* "lavatube-start"))
          )

        (check-citadel-skip)
      )
      (none)
      ) 

    (defun runs-on-level-status-update ()
      ;; this could/should be improved to some more dynamic structure
      ;; especially if we want to support multiplayer in jak 2 in the future as well

      (when (and *target* (!= (-> (level-get-target-inside *level*) name) 'title))
        (when (-> *level* level 0)
          (set! (-> *teamrun-levels-info* level0_name) (symbol->string (-> *level* level 0 name)))
          (set! (-> *teamrun-levels-info* level0_status) (symbol->string (-> *level* level 0 status)))
          )

        (when (-> *level* level 1)
          (set! (-> *teamrun-levels-info* level1_name) (symbol->string (-> *level* level 1 name)))
          (set! (-> *teamrun-levels-info* level1_status) (symbol->string (-> *level* level 1 status)))
          )

        
        (set! (-> *teamrun-levels-info* has_level_update?) 1)
        (set! *has-none-position-update?* #t)
        )
      (none)
      )

    ;; fixes issues where you can't TP jak because he isn't fully spawned in yet
    (defun runs-after-jak-spawn ()
      ;; makes sure citadel elevator always spawns in
      (if (string= (symbol->string (-> (level-get-target-inside *level*) name)) "citadel")
        (send-event (process-by-name "citb-exit-plat-4" *active-pool*) 'trigger)
        )

      (when *move-by-index-on-spawn*
        (set! *move-by-index-on-spawn* #f)
        (+! (-> *target* root trans x) (meters (* (the float (-> *self-player-info* player_index)) 2.8)))
        (+! (-> *target* root trans z) (meters (* (the float (-> *self-player-info* player_index)) 0.5)))
        )


      (cond
        ((name= (-> *game-info* current-continue name) "finalboss-fight")
          (when (not *allow-final-boss?*) 
            (+! (-> *target* root trans x) (meters -161.0))
            (+! (-> *target* root trans z) (meters 120.0))
            (+! (-> *target* root trans y) (meters 90.0))
            (send-event *camera* 'change-state cam-string 0)
            )
          (let ((boss (process-by-ename "robotboss-3")))
            (if (and boss (any-remote-interactive-targets-close? (the-as process-drawable boss) (meters 300.0)))
              (safe-boss-up-to-phase "robotboss-3" *current-boss-phase* #f)
              (set! *current-boss-phase* -1)
              )
            )
          )
        ((name= (-> *game-info* current-continue name) "citadel-elevator")
          (if *allow-one-time-citadel-skip?*
            (set! *allow-one-time-citadel-skip?* #f)
            )
          )
        ((name= (-> *game-info* current-continue name) "ogre-start")
          (let ((bridge (process-by-ename "ogre-bridge-1")))
            (if (and bridge (any-remote-interactive-targets-close? (the-as process-drawable bridge) (meters 100.0)))
              (safe-boss-up-to-phase "ogreboss-1" *current-boss-phase* #f)
              (set! *current-boss-phase* -1)
              )
            )
          )
        ((name= (-> *game-info* current-continue name) "jungle-tower")
          (let ((boss (process-by-ename "plant-boss-3")))
            (if (and boss (any-remote-interactive-targets-close? (the-as process-drawable boss) (meters 40.0)))
              (safe-boss-up-to-phase "plant-boss-3" *current-boss-phase* #f)
              (set! *current-boss-phase* -1)
              )
            )
          )
        )
        (none)
      )

    (defun add-pickup-to-interaction-buffer ((kind pickup-type) (amount float) (proc process))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) (the-as interaction-type kind))
          (set! (-> *interaction-update-buffer* idx amount) amount)
          (set! (-> *interaction-update-buffer* idx status) 0.0)

          (case kind
            (((pickup-type money) (pickup-type buzzer) (pickup-type fuel-cell))
              (if (or (name= (-> proc name) "fuel-cell") (name= (-> proc name) "buzzer"))
                (set! (-> *interaction-update-buffer* idx ename) (symbol->string (-> proc name)))
                (set! (-> *interaction-update-buffer* idx ename) (the-as string (-> proc name)))
                )
              (let* ((parent (ppointer->process (-> proc parent))))
                (if (or (name= (-> parent name) "entity-pool") (name= (-> parent name) "buzzer"))
                (set! (-> *interaction-update-buffer* idx parent) (symbol->string (-> parent name)))
                (set! (-> *interaction-update-buffer* idx parent) (the-as string (-> parent name)))
                  )
                )
              (set! (-> *interaction-update-buffer* idx level) (symbol->string (-> *level* level (-> (the-as process-drawable proc) draw level-index) name)))
              )

            (((pickup-type eco-blue) (pickup-type eco-yellow) (pickup-type eco-green) (pickup-type eco-red))
                (let* ((parent (ppointer->process (-> proc parent))))
                  (if (and (name= (-> parent name) "entity-pool") (not (or (name= (-> proc name) "health") (name= (-> proc name) "eco-blue") (name= (-> proc name) "eco-red") (name= (-> proc name) "eco-yellow"))))
                    (set! (-> *interaction-update-buffer* idx ename) (the-as string (-> proc name)))
                    (set! (-> *interaction-update-buffer* idx ename) (symbol->string (-> proc name)))
                    )
                  (if (name= (-> parent name) "entity-pool")
                    (set! (-> *interaction-update-buffer* idx parent) "entity-pool") ;; crash exist if assigned from parent name on green-eco from box
                    (set! (-> *interaction-update-buffer* idx parent) (the-as string (-> parent name)))
                    )
                  )
              (set! (-> *interaction-update-buffer* idx level) (symbol->string (-> (level-get-target-inside *level*) name)))
              )
            )
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)
          (return #t)
          )
        )
      (none)
      )

    (defun add-task-to-interaction-buffer ((task game-task) (status task-status))
      (when (or (!= task *last-task*) (!= status *last-task-status*))
        (dotimes (idx (-> *interaction-update-buffer* length))
          (when (= (-> *interaction-update-buffer* idx has_update?) #f)

            (set! *last-task* task)
            (set! *last-task-status* status)

            (set! (-> *interaction-update-buffer* idx type) (interaction-type game-task))
            (set! (-> *interaction-update-buffer* idx amount) (the float task))
            (set! (-> *interaction-update-buffer* idx status) (the float status))
            (set! (-> *interaction-update-buffer* idx ename) (game-task->string task))
            (set! (-> *interaction-update-buffer* idx level) (symbol->string (-> (level-get-target-inside *level*) name)))
            (set! (-> *interaction-update-buffer* idx parent) "entity-pool")
            
            (set! (-> *interaction-update-buffer* idx has_update?) #t)
              
            (return #t)
            )
          )
        )
      (none)
      )

    (defun add-death-to-interaction-buffer ((name string) (amount float))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) (interaction-type enemy-death))
          (set! (-> *interaction-update-buffer* idx amount) amount)
          (set! (-> *interaction-update-buffer* idx status) 0.0)
          (set! (-> *interaction-update-buffer* idx ename) name)
          (set! (-> *interaction-update-buffer* idx level) (symbol->string (-> (level-get-target-inside *level*) name)))
          (set! (-> *interaction-update-buffer* idx parent) "entity-pool")
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)
          (return #t)
          )
        )
      (none)
      )

    (defun add-crate-to-interaction-buffer ((type crate-type) (amount float) (proc process))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) (interaction-type crate))
          (set! (-> *interaction-update-buffer* idx amount) amount)
          (set! (-> *interaction-update-buffer* idx status) (the float type))
          (set! (-> *interaction-update-buffer* idx ename) (the-as string (-> proc name)))
          (set! (-> *interaction-update-buffer* idx level) (symbol->string (-> *level* level (-> (the-as process-drawable proc) draw level-index) name)))
          (set! (-> *interaction-update-buffer* idx parent) (symbol->string (-> (ppointer->process (-> proc parent)) name)))
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)
          (return #t)
          )
        )
      (none)
      )

    ;; name type level
    (defun add-fish-to-interaction-buffer ((total-amount float) (type interaction-type) (status float))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) type)
          (set! (-> *interaction-update-buffer* idx amount) total-amount)
          (set! (-> *interaction-update-buffer* idx status) status)
          (set! (-> *interaction-update-buffer* idx ename) "fisher-1")
          (set! (-> *interaction-update-buffer* idx level) "jungle")
          (set! (-> *interaction-update-buffer* idx parent) "entity-pool")
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)
          (return #t)
          )
        )
      (none)
      )

    ;; name type level
    (defun add-level-objective-to-interaction-buffer ((name string) (type interaction-type) (level string))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) type)
          (set! (-> *interaction-update-buffer* idx amount) 1.0)
          (set! (-> *interaction-update-buffer* idx status) 0.0)
          (set! (-> *interaction-update-buffer* idx ename) name)
          (set! (-> *interaction-update-buffer* idx level) level)
          (set! (-> *interaction-update-buffer* idx parent) "entity-pool")
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)
          (return #t)
          )
        )
      (none)
      )

    ;; status level
    (defun add-lpc-chamber-to-interaction-buffer ((stop-point float) (level string))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) (interaction-type lpc-chamber))
          (set! (-> *interaction-update-buffer* idx amount) 1.0)
          (set! (-> *interaction-update-buffer* idx status) stop-point)
          (set! (-> *interaction-update-buffer* idx ename) "exit-chamber-1")
          (set! (-> *interaction-update-buffer* idx level) level)
          (set! (-> *interaction-update-buffer* idx parent) "entity-pool")
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)
          (return #t)
          )
        )
      (none)
      )

    ;; name amount level
    (defun add-boss-phase-to-interaction-buffer ((name string) (phase float) (level string) (force-phase float))
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #f)

          (set! (-> *interaction-update-buffer* idx type) (interaction-type boss-phase))
          (set! (-> *interaction-update-buffer* idx amount) phase)
          (set! (-> *interaction-update-buffer* idx status) force-phase)
          (set! (-> *interaction-update-buffer* idx ename) name)
          (set! (-> *interaction-update-buffer* idx level) level)
          (set! (-> *interaction-update-buffer* idx parent) "entity-pool")
            
          (set! (-> *interaction-update-buffer* idx has_update?) #t)

          (set! *current-boss-phase* (the int phase))

          (return #t)
          )
        )
      (none)
      )

    (defun check-set-interaction-from-buffer ()
      (dotimes (idx (-> *interaction-update-buffer* length))
        (when (= (-> *interaction-update-buffer* idx has_update?) #t)

          ;; self-player-info holds data going out
          ;; (-> *multiplayer-info* player_num) holds data coming in (orb reduction)
          (set! (-> *self-player-info* inter_type) (-> *interaction-update-buffer* idx type))
          (set! (-> *self-player-info* inter_amount) (-> *interaction-update-buffer* idx amount))
          (set! (-> *self-player-info* inter_status) (-> *interaction-update-buffer* idx status))
          (set! (-> *self-player-info* inter_name) (-> *interaction-update-buffer* idx ename))
          (set! (-> *self-player-info* inter_parent) (-> *interaction-update-buffer* idx parent))
          (set! (-> *self-player-info* inter_level) (-> *interaction-update-buffer* idx level))
          
          (set! *has-none-position-update?* #t)

          (set! (-> *interaction-update-buffer* idx has_update?) #f)
          (return #t)
          )
        )
    )


    (defun manual-position-update ((num int) (transX float) (transY float) (transZ float) (quatY float) (quatZ float) (quatW float) (state string))
      (set! (-> *multiplayer-info* players num trans_x)    transX)
      (set! (-> *multiplayer-info* players num trans_y)    transY)
      (set! (-> *multiplayer-info* players num trans_z)    transZ)
      (set! (-> *multiplayer-info* players num quat_y)     quatY)
      (set! (-> *multiplayer-info* players num quat_z)     quatZ)
      (set! (-> *multiplayer-info* players num quat_w)     quatW)
      (set! (-> *multiplayer-info* players num tgt_state)  (string->symbol state))
      (none)
      )

    (defun execute-teamrun-command ()
      (case (-> *multiplayer-info* teamrun_command)
        (((teamrun-command mark-connected))
          (set! *cheat-mode* #f)
          (set! (-> *pc-settings* speedrunner-mode?) #t)
          (set! (-> *self-player-info* color)  (tgt-color normal))
          (set! (-> *pc-settings* ps2-actor-vis?) #f)
          )
        (((teamrun-command setup-run)) 
          (initialize! *game-info* 'game (the-as game-save #f) (the-as string #f))
          (set! *debug-segment* #f)
          (set! *cheat-mode* #f)
          (set! (-> *pc-settings* speedrunner-mode?) #t)
          (set! *move-by-index-on-spawn* #t)
          (start 'play (get-continue-by-name *game-info* "village1-hut"))
          )
        (((teamrun-command start-run))
          (safe-release-from-grab)
          (reset-run-variables)
          (progress-fast-save-and-start-speedrun (speedrun-category full-game))
          (set! (-> *pc-settings* ps2-actor-vis?) #f)
          (set! *allow-cell-pickup?* #t)
          (set! *allow-final-boss?* #t)
          )
        (((teamrun-command reset-game)) 
          (set! (-> *game-info* mode) 'debug) ;;prevent jak from respawning
          (initialize! *game-info* 'game (the-as game-save #f) (the-as string #f))
          (set! (-> *game-info* mode) 'play)
          )
        (((teamrun-command reset-actors)) (reset-actors 'life))
        (((teamrun-command trip)) (send-event *target* 'loading))
        (((teamrun-command target-grab)) (process-grab? *target*))
        (((teamrun-command target-release)) (safe-release-from-grab))
        (((teamrun-command temp-checkpoint-store)) (store-temp-checkpoint))
        (((teamrun-command temp-checkpoint-load)) (spawn-temp-checkpoint))
        (((teamrun-command free-cam-enter))
          (send-event *camera* 'change-state cam-free-floating 0)
          (process-grab? *target*)
          )
        (((teamrun-command free-cam-exit))
          (send-event *camera* 'change-state cam-string 0)
          (safe-release-from-grab)
          )
        (((teamrun-command on-remote-level-update)) (runs-on-level-enter))
        (((teamrun-command enable-debug-mode))
          (set! *debug-segment* #t)
          (set! *cheat-mode* #t)
          )
        (((teamrun-command disable-debug-mode))
          (set! *debug-segment* #f)
          (set! *cheat-mode* #f)
          )
        )
      (pc-clear-mp-command)
      (none)
      )


    (defun runs-every-frame ()
      (when (and (!= *target* #f) (!= (-> (level-get-target-inside *level*) name) 'title))
      
      ;; setup our own remote-player-info if we haven't yet
      (set-up-self-remote-if-null)

      (when (and *target* (>= (-> *multiplayer-info* player_num) 0) (!= (-> *self-player-info* mp_state) (mp-tgt-state mp-tgt-disconnected)))

        (check-set-interaction-from-buffer)

        (when (not (string= (-> *multiplayer-info* force_continue) ""))
          (start 'play (get-continue-by-name *game-info* (-> *multiplayer-info* force_continue)))
          (set! (-> *multiplayer-info* force_continue) (new 'global 'string INTERACTION_STRING_LEN (the-as string #f)))
          )
        (if (!= (-> *multiplayer-info* teamrun_command) (teamrun-command none)) (execute-teamrun-command))

        ;; on player movement
        (when (and (not *in-finalboss-cutscene?*)
          (or *has-none-position-update?*
          (!= (-> *self-player-info* trans_x) (-> *target* root trans x))
          (!= (-> *self-player-info* trans_y) (-> *target* root trans y))
          (!= (-> *self-player-info* trans_z) (-> *target* root trans z))
          (!= (-> *self-player-info* tgt_state) (-> *target* state name))
        ))

            ;; update this player's position
            (update-self-multiplayer-info)
            ;; (update-debug-self-multiplayer-info)
            
            ;; send updated player info to client
            (pc-update-position)


            ;; clean none position updates
            (when *has-none-position-update?*
              (set! *has-none-position-update?* #f)

              ;; target pickup data
              (clean-up-interaction-data *self-player-info*)
              
              ;; update flags
              (set! (-> *teamrun-info* has_state_update?) 0)
              (set! (-> *teamrun-levels-info* has_level_update?) 0)
              (set! (-> *teamrun-info* just_loaded?) 0)
              (set! (-> *teamrun-info* just_saved?) 0)
              (when (!= (-> *teamrun-info* just_spawned?) 0)
                (set! (-> *teamrun-info* just_spawned?) 0)
                (runs-after-jak-spawn)
                )
              )


            (if (= (-> *multiplayer-info* players (-> *multiplayer-info* player_num) mp_state) (mp-tgt-state mp-tgt-disconnected))
              (set! (-> *multiplayer-info* players (-> *multiplayer-info* player_num) mp_state) (mp-tgt-state mp-tgt-interactive))
              )
          )

        (render-targets)
        (if (and (not (paused?)) (!= *team-ui-option* (team-ui-option none))) ;; render teamrun UI
          (with-dma-buffer-add-bucket ((textbuf (-> (current-frame) global-buf)) (bucket-id subtitle))
            (render-player-ui textbuf)
            )
        )

        
        ;; color ourselves
        (color-target *target* (-> *self-player-info* color))

        )

        ;; UI toggling
        (when (cpad-hold? 0 l2)
          (cond
            ((cpad-pressed? 0 left)
              (if (= *team-ui-option* (team-ui-option none))
                (set! *team-ui-option* (team-ui-option all-teams))
                (set! *team-ui-option* (the team-ui-option (- (the int *team-ui-option*) 1)))
                )
              )
            ((cpad-pressed? 0 right)
              (if (= *team-ui-option* (team-ui-option all-teams))
                (set! *team-ui-option* (team-ui-option none))
                (set! *team-ui-option* (the team-ui-option (+ (the int *team-ui-option*) 1)))
                )
              )
            ((or (cpad-pressed? 0 up) (cpad-pressed? 0 down))
              (if (= *player-ui-option* (player-ui-option minimal))
                (set! *player-ui-option* (player-ui-option full))
                (set! *player-ui-option* (player-ui-option minimal))
                )
              )
            )
          )
      )
      (none)
      )

    (defun runs-on-task-update ((task game-task) (status task-status))
      (add-task-to-interaction-buffer task status)
      
      (if (and (= (-> *multiplayer-info* game mode) (run-mode lockout)) (= status (task-status need-resolution)))
        (check-lockout-restrictions)
        )
      (none)
      )

    (defun runs-on-pickup ((kind pickup-type) (amount float) (proc process))
      (if (and (-> proc parent)
        (not (name= (-> proc name) "display")) ;; prevent pickups given over REPL
        (not (and (= kind (pickup-type money)) (<= amount -90))) ;; prevent orb buys to avoid dupe deductions on buy
          )
        (add-pickup-to-interaction-buffer kind amount proc)
        )
      (none)
      )

    (defun runs-on-crate-break ((type crate-type) (amount float) (proc process))
      (add-crate-to-interaction-buffer type amount proc)

      (none)
      )

    (defun runs-on-orb-pickup ((parent process-tree))
      (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
        ;; Code here runs on ANY orb pickup


        (when from-cache?
          ;; Code here runs only if the orb was from an orb cache

          )

        (when (not from-cache?)
          ;; Code here runs only if the orb was NOT from an orb cache

          )
        )
      (none)
      )

    (defun runs-on-fly-pickup ((buzzer-id float))
      ;; Code here runs on any scout fly pickup
      (none)
      )

    (defun runs-on-cell-pickup ((cell-event symbol))
      (case cell-event
        (('pickup)      
          ;; Code here runs as soon as you pickup a powercell
          
          (safe-deactivate-remote-cell)
          )
        (('cutscene-end)      
          ;; Code here runs at the end of any powercell cutscene

          )
        )

      (none)
      )

    (defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
      (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
        ;; Code here runs as soon as you pickup ANY eco

        (case eco-type
          (((pickup-type eco-yellow))      
            ;; Code here runs as soon as you pickup yellow eco

            )
          (((pickup-type eco-red))      
            ;; Code here runs as soon as you pickup red eco

            )
          (((pickup-type eco-blue))      
            ;; Code here runs as soon as you pickup blue eco

            )
          (((pickup-type eco-pill))      
            ;; Code here runs as soon as you pickup small green eco

            )
          (((pickup-type eco-green))      
            ;; Code here runs as soon as you pickup big green eco 

            )
          )
        
        (when from-vent?
          ;; Code here runs only if the eco was picked up from a vent

          )
        )

      (none)
      )

    (defun runs-on-fish-caught ((total-amount float))
      (add-fish-to-interaction-buffer total-amount (interaction-type fish) 1.0)
      (none)
      )

    (defun runs-on-fish-missed((total-amount float))
      (add-fish-to-interaction-buffer total-amount (interaction-type fish) 0.0)
      (none)
      )

    (defun runs-on-periscope-activate ((periscope-name string))
      (add-level-objective-to-interaction-buffer periscope-name (interaction-type periscope) "jungle")
      (none)
      )

    (defun runs-on-last-periscope-power-up ()
      (add-level-objective-to-interaction-buffer "periscope-16" (interaction-type periscope) "jungle")
      (none)
      )

    (defun runs-on-bumper-deactivate ((bumper-name string))
      (add-level-objective-to-interaction-buffer bumper-name (interaction-type snow-bumper) "snow")
      (none)
      )

    (defun runs-on-dark-crystal-explode ((crystal-name string) (level-name string))
      (add-level-objective-to-interaction-buffer crystal-name (interaction-type dark-crystal) level-name)
      (none)
      )

    (defun runs-on-lpc-chamber-stop ((stop-point float))
      (add-lpc-chamber-to-interaction-buffer stop-point (if (= stop-point 1.0) "sunkenb" "village2"))
      (none)
      )

    (defun runs-on-swingpole-grab ((pole-name string) (level-name string))
      (add-level-objective-to-interaction-buffer pole-name (interaction-type swingpole) level-name)
      (none)
      )

    (defun runs-on-jak-spawn ()
      ;; Code here runs every time jak spawns (loading a file new game or death)
      (set! (-> *teamrun-info* just_spawned?) 1)
      (update-state)

      (none)
      )

    (defun runs-on-jak-death ((death-event symbol))
      (case death-event
        (('dying)
          ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
          
          (if (!= *current-boss-phase* -1) 
            (cond
              ((name= (-> *game-info* current-continue name) "jungle-tower")
                (if (< *current-boss-phase* 2)
                  (set! *current-boss-phase* (+ *current-boss-phase* 1))
                  )
                (add-boss-phase-to-interaction-buffer "plant-boss-3" (the float *current-boss-phase*) "jungleb" 1.0)
                )
              ((name= (-> *game-info* current-continue name) "ogre-start")
                (when (< *current-boss-phase* 6)
                  (set! *current-boss-phase* (if (<= *current-boss-phase* 4) (+ *current-boss-phase* 3) 7))
                  (add-boss-phase-to-interaction-buffer "ogreboss-1" (the float *current-boss-phase*) "ogre" 1.0)
                  )
                )
              ((name= (-> *game-info* current-continue name) "finalboss-fight")
                (case *current-boss-phase*
                  ((0)
                    (set! *current-boss-phase* 1)
                    )
                  ((1 2)
                    (set! *current-boss-phase* 3)
                    )
                  ((3 4)
                    (set! *current-boss-phase* 5)
                    )
                  ((5 6)
                    (set! *current-boss-phase* 6)
                    )
                  )
                (add-boss-phase-to-interaction-buffer "robotboss-3" (the float *current-boss-phase*) "finalboss" 1.0)
                )
              )
            )

          )
        (('blackout)
          ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

          )
        )
      
      (none)
      )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
